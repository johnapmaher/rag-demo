AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31


Parameters:
  OpenAIAPIKey:
    Type: String
    Description: "OpenAI API Key"

Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-upload-bucket-${AWS::Region}-${AWS::AccountId}'
    DeletionPolicy: Delete

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-sessions'
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'file-name,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  UploadDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.upload_document.handler
      Runtime: python3.10
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref UploadBucket
          DYNAMODB_TABLE_NAME: !Ref SessionsTable
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        UploadAPI:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            RestApiId: !Ref ApiGateway

  DocumentIndexingFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: DocumentIndexingFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'aoss:APIAccessAll'
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${UploadBucket}/*'
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt SessionsTable.StreamArn

  DocumentIndexingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.document_indexing.handler
      Runtime: python3.10
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref UploadBucket
          OPENSEARCH_ENDPOINT: !GetAtt Collection.CollectionEndpoint
          OPENAI_API_KEY: !Ref OpenAIAPIKey
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt SessionsTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
      Role: !GetAtt DocumentIndexingFunctionRole.Arn

  IAMUSer:
    Type: 'AWS::IAM::User'
    Properties:
      UserName:  aossadmin

  DataAccessPolicy:
    Type: 'AWS::OpenSearchServerless::AccessPolicy'
    Properties:
      Name: quickstart-access-policy
      Type: data
      Description: Access policy for quickstart collection
      Policy: !Sub >-
        [{"Description":"Access for cfn user","Rules":[{"ResourceType":"index","Resource":["index/*/*"],"Permission":["aoss:*"]},
        {"ResourceType":"collection","Resource":["collection/quickstart"],"Permission":["aoss:*"]}],
        "Principal":["arn:aws:iam::${AWS::AccountId}:user/aossadmin",
                     "arn:aws:iam::${AWS::AccountId}:role/${DocumentIndexingFunctionRole}"]}]

  NetworkPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    Properties:
      Name: quickstart-network-policy
      Type: network
      Description: Network policy for quickstart collection
      Policy: >-
        [{"Rules":[{"ResourceType":"collection","Resource":["collection/quickstart"]}, {"ResourceType":"dashboard","Resource":["collection/quickstart"]}],"AllowFromPublic":true}]
  
  EncryptionPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    Properties:
      Name: quickstart-security-policy
      Type: encryption
      Description: Encryption policy for quickstart collection
      Policy: >-
        {"Rules":[{"ResourceType":"collection","Resource":["collection/quickstart"]}],"AWSOwnedKey":true}
  
  Collection:
    Type: 'AWS::OpenSearchServerless::Collection'
    Properties:
      Name: quickstart
      Type: TIMESERIES
      Description: Collection to holds timeseries data
    DependsOn: EncryptionPolicy

Outputs:
  IAMUser:
    Value: !Ref IAMUSer
  DashboardURL:
    Value: !GetAtt Collection.DashboardEndpoint
  CollectionARN:
    Value: !GetAtt Collection.Arn

