AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ECRRepository:
    Type: String
    Description: The ECR repository URI
  ImageTag:
    Type: String
    Description: The Docker image tag
  ClusterName:
    Type: String
    Description: The ECS cluster name
  ServiceName:
    Type: String
    Description: The ECS service name
  OpenAIApiKey:
    Type: String
    Description: The OpenAI API key
  DomainName:
    Type: String
    Description: The domain name for the service
  HostedZoneId:
    Type: String
    Description: The Route 53 Hosted Zone ID for the domain
  CertificateArn:
    Type: String
    Description: The ARN of the ACM SSL certificate

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterName

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/ecs/${ServiceName}'
      RetentionInDays: 7

  ALBAccessLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ServiceName}-alb-logs'
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 30

  ALBAccessLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ALBAccessLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'elasticloadbalancing.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${ServiceName}-alb-logs/*'
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref 'AWS::AccountId'
              StringLike:
                'aws:SourceArn': !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/*'


  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${ServiceName}-alb'
      Subnets:
        - subnet-06c4691a85188d142
        - subnet-018d4c23d20205cfe
      SecurityGroups:
        - sg-022dcc111a874a850
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref ALBAccessLogsBucket
        - Key: access_logs.s3.prefix
          Value: 'alb-logs'

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${ServiceName}-tg'
      Port: 8000
      Protocol: HTTP
      VpcId: vpc-006678b65f3f4fc0c
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: '8000'
      HealthCheckPath: '/health'
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  CloudWatchDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Sub '${ServiceName}-Dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ECS", "CPUUtilization", "ClusterName", "${ECSCluster}", "ServiceName", "${ServiceName}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ECS Service CPU Utilization"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ECS", "MemoryUtilization", "ClusterName", "${ECSCluster}", "ServiceName", "${ServiceName}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "ECS Service Memory Utilization"
              }
            }
          ]
        }

  HTTPListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
    DependsOn: LoadBalancer

  HTTPSListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
    DependsOn: LoadBalancer

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 300  # Increased grace period to 5 minutes
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-06c4691a85188d142
            - subnet-018d4c23d20205cfe
          SecurityGroups:
            - sg-022dcc111a874a850  # Replace with your actual security group ID
      LoadBalancers:
        - ContainerName: fastapi-container
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup
    DependsOn: [HTTPListener, HTTPSListener]

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref ServiceName
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !Ref ECSExecutionRole
      ContainerDefinitions:
        - Name: fastapi-container
          Image: !Sub '${ECRRepository}:${ImageTag}'
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: OPENAI_API_KEY
              Value: !Ref OpenAIApiKey
          HealthCheck:
            Command: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
            Interval: 120
            Timeout: 30
            Retries: 3
            StartPeriod: 300

  ECSExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  DNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneId

Outputs:
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
  ECSServiceName:
    Description: The name of the ECS service
    Value: !Ref ECSService
  ECSTaskDefinitionArn:
    Description: The ARN of the ECS task definition
    Value: !Ref ECSTaskDefinition
  LoadBalancerDNSName:
    Description: The DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName