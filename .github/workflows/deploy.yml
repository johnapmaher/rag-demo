name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install
        working-directory: ./client

      - name: Run tests
        run: npm run test
        working-directory: ./client

      - name: Build project
        run: npm run build
        working-directory: ./client

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sanitize repository name
        id: sanitize
        run: echo "::set-output name=sanitized_name::$(echo ${{ github.repository }} | tr '/' '-')"

      - name: Wait for stack to reach a stable state
        run: |
          STACK_NAME=${{ steps.sanitize.outputs.sanitized_name }}
          while true; do
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "STACK_DOES_NOT_EXIST")
            if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" || "$STACK_STATUS" == "STACK_DOES_NOT_EXIST" ]]; then
              break
            fi
            echo "Waiting for stack to reach a stable state..."
            sleep 30
          done

      - name: Delete stack if in ROLLBACK_COMPLETE state
        run: |
          STACK_NAME=${{ steps.sanitize.outputs.sanitized_name }}
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "STACK_DOES_NOT_EXIST")
          if [ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name $STACK_NAME
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
          fi

      - name: Create S3 bucket if it doesn't exist
        run: |
          BUCKET_NAME=${{ steps.sanitize.outputs.sanitized_name }}-bucket
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            aws s3 mb s3://$BUCKET_NAME
          fi

      - name: Upload to S3
        run: |
          BUCKET_NAME=${{ steps.sanitize.outputs.sanitized_name }}-bucket
          aws s3 sync client/build/ s3://$BUCKET_NAME --delete

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file client/cloudformation-template.yml \
            --stack-name ${{ steps.sanitize.outputs.sanitized_name }} \
            --parameter-overrides S3BucketName=${{ steps.sanitize.outputs.sanitized_name }}-bucket \
            --capabilities CAPABILITY_NAMED_IAM
