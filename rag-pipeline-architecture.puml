@startuml RAG pipeline architecture

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v18.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/General/Users.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Storage/SimpleStorageService.puml
!include AWSPuml/Analytics/OpenSearchService.puml

left to right direction

APIGateway(ragAPI, "RAG API", "API to upload and and retrieve on query")
DynamoDB(sessionDb, "Session Database", "maintain session data")
Lambda(indexDocument, "Index document", "return generated responses")
Lambda(uploadDocument, "Upload document", "return sessionId")
Lambda(queryDocument, "Query document", "return generated responses")
SimpleStorageService(docStore, "Document Storage", "Object store for documents")
OpenSearchService(vectorStore, "Vector Store", "Store for vector representations")
Users(sources, "RAG Demo React App", "n users")
Container(openAI, "OpenAI Embedding Model", "External service for generating embeddings")
Container(openAIGen, "OpenAI Generative Model", "External service for generating answers")

sources --> ragAPI : Invokes uploadDocument or queryDocument
ragAPI --> uploadDocument : Triggers upload workflow
ragAPI <-- queryDocument : Retrieves document related to query and generates response using
queryDocument --> sessionDb
queryDocument --> vectorStore
queryDocument --> openAIGen
uploadDocument --> sessionDb
uploadDocument --> docStore
sessionDb --> indexDocument : triggered by insertion of new record
docStore <-- indexDocument : Retrieves document for embedding
indexDocument --> vectorStore
indexDocument <--> openAI : Calls OpenAI embedding model

@enduml
